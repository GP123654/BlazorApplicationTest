@page "/adminPage"


@using BlazorApp3.Data;
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims

@inject IJSRuntime JsRuntime
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> _signInManager


    <style>

    .signInBtn {
        width: 25%;
        padding: 10px 20px;
        outline: none;
        font-weight: 500;
        border: none;
        font-size: 16px;
        letter-spacing: 1px;
        color: #ffffff;
        background: #673AB7;
        border-radius: 30px;
        cursor: pointer;
        margin-bottom: 15px;
        margin-left:15px;
        margin-top: 30px;
        /*box-shadow: 5px 5px 5px purple;*/
    }

    .signInBtn:hover{
        background: #7E57C2;
    }

    </style>



<h3>AdminPage</h3>


<EditForm Model="newUser" OnValidSubmit="@AddUserWithRole">
    <DataAnnotationsValidator/>
    <ValidationSummary/>


    <div class="form-group row">
        <label for="login" class="col-sm-2 col-form-label">
            Add User
        </label>
        <div class="col-sm-10">
            <InputText id="login" @bind-Value="newUser.LoginName" style="border: 1px solid mediumPurple"></InputText>
        </div>
    </div>


    <div class="form-group row">
        <label for="role-select" class="col-sm-2 col-form-label">
            Assign Role
        </label>
    <div class="col-sm-10">
        <InputSelect id="role-select" style="border: 1px solid mediumPurple" @bind-Value="newUser.UserRole">
            @foreach (var role in selectList)
            {
                <option value="@role.Value" selected="@role.Selected">@role.Text</option>
            }
        </InputSelect>
    </div>
    </div>
    <input type="submit" class="signInBtn" value="Save"/>
</EditForm>






@code {
        User newUser = new User();
        List<Role> rolesList = new List<Role>();
        List<SelectListItem> selectList = new List<SelectListItem>();

    protected override async Task OnInitializedAsync()
    {
        rolesList = new List<Role>()
        {
            new Role(){RoleName = "Admin", ID = "1"},
            new Role(){RoleName = "Employee", ID = "2"},
            new Role(){RoleName = "User", ID = "3"}
        };

        foreach(Role role in rolesList)
        {
            if (rolesList.Count < 1)
            {
                selectList.Add(new SelectListItem()
                {
                    Text = role.RoleName,
                    Value = role.ID,
                    Selected = true
                });
            }
            else
            {
                selectList.Add(new SelectListItem()
                {
                    Text = role.RoleName,
                    Value = role.ID,
                    Selected = false
                });
            }
        }
    }


    public async void AddUserWithRole(EditContext context)
    {
        var userModel = context.Model as User;

        var user = new IdentityUser { UserName = userModel.LoginName, Email = userModel.LoginName, EmailConfirmed = true };

        var messagePrompt = "Failed";

        var result = await _userManager.CreateAsync(user, "Password123!");

        if (result.Succeeded)
        {
            messagePrompt = "User Was Added";

            var getRoleFromList = rolesList.FirstOrDefault(x => x.ID == userModel?.UserRole);
            //Sets the default role to User I think
            var roleAddedResult = await _userManager.AddToRoleAsync(user, getRoleFromList?.RoleName ?? "User");

            if (roleAddedResult.Succeeded)
            {
                messagePrompt += "Role Was Added";
            }


            var claimAddedResult = await _userManager.AddClaimAsync(user, new Claim(getRoleFromList?.RoleName ?? "User", getRoleFromList?.ID ?? ""));

            if (claimAddedResult.Succeeded)
            {
                messagePrompt += "Claim Was Added";
            }

        }
        await JsRuntime.InvokeVoidAsync("alert", messagePrompt);
    }
}
